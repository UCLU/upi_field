<?php
/*
 * @file
 * Main module file for UPI Field.
 *
 * A UPI is a UCL Personal Identifier: see http://www.ucl.ac.uk/isd/common/upi
 */

/*
 * Validate a given UPI.
 *
 * This function is declared here to make the UPI definition obvious. UPIs are
 * always 7 characters long, consisting of 5 letters of the alphabet followed by
 * 2 integers. They can be in any case, but students are used to seeing their
 * UPIs displayed in upper case.
 *
 * @param string $str
 * @return bool
 */
function upi_field_validate_upi($str) {
  return preg_match('/\b[a-z]{5}[0-9]{2}\b/i', $str);
}

/*
 * Implements hook_field_info().
 *
 * Define the UPI field.
 */
function upi_field_field_info() {
  return array(
    'upi' => array(
      'label' => t('UPI'),
      'description' => t('UPI (UCL Personal Identifier) field.'),
      'settings' => array('max_length' => 7, 'size' => 7), // Only included to satisfy text.module
      'instance_settings' => array('text_processing' => 0), // Only included to satisfy text.module
      'default_widget' => 'text_textfield',
      'default_formatter' => 'upi_formatter',
    ),
  );
}

/*
 * Implements hook_field_field_is_empty().
 *
 * This function must be defined according to field.module.
 *
 * @return bool
 */
function upi_field_field_is_empty($item, $field) {
  return empty($item['value']);
}

/*
 * Implements hook_field_validate().
 */
function upi_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!upi_field_validate_upi($item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'upi_invalid',
          'message' => t('%name: invalid UPI.', array('%name' => $instance['label'])),
        );
      }
    }
  }
}

/*
 * Implements hook_field_widget_info_alter().
 *
 * Allow the UPI field to use the text_textfield widget.
 */
function upi_field_field_widget_info_alter(&$info) {
  $info['text_textfield']['field types'][] = 'upi';
}

/*
 * Implements hook_field_formatter_info().
 */
function upi_field_field_formatter_info() {
  return array(
    'upi_formatter' => array(
      'label' => t('UPI'),
      'field types' => array('upi'),
      'settings'  => array(), // no settings
    ),
  );
}

/*
 * Implements hook_field_formatter_view().
 *
 * Make sure that UPIs are always displayed in upper case.
 */
function upi_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'upi_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => drupal_strtoupper($item['value']),
        );
      }
      break;
  }
  return $element;
}


/**
 * Implements hook_webform_validation_validators().
 * 
 * This integrates with the Webform Validation module.
 */
function upi_field_webform_validation_validators() {
  return array(
    'upi' => array(
      'name' => 'UPI (UCL Personal Identifier)',
      'component_types' => array(
        'textfield',
        'textarea',
        'hidden',
      ),
      'description' => t('Verifies that a user-entered value is a valid UCL Personal Identifier.'),
    ),
  );
}

/**
 * Implements hook_webform_validation_validate().
 */
function upi_field_webform_validation_validate($validator_name, $items, $components, $rule) {
  if ($validator_name == 'upi' && $items) {
    $errors = array();
    foreach ($items as $key => $value) {
      if (!upi_field_validate_upi($value)) {
        $errors[$key] = t('%value is not a valid UPI.', array('%value' => $value));
      }
    }
    return $errors;
  }
}
